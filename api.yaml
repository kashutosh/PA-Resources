openapi: 3.0.1
info:
  title: PA
  description: 'This is PA server API. Know more at https://localhost.io:9090'
  termsOfService: https://localhost.io:9090/termsofservice
  contact:
    email: ashutosh.n.kulkarni@gmail.com
  license:
    name: Propriatory Information
    url: https://localhost.io:9090/license
  version: 1.0.0

servers:
- url: https://localhost:9090.io/v1
tags:
- name: reader
  description: Everything about read only user
  externalDocs:
    description: Find out more
    url: https://localhost:9090.io
- name: event
  description: Everything about event
- name: user
  description: Operations about user
- name: location
  description: Everything about locations
- name: channel
  description: Everything about channel
- name: dashboard
  description: Dashboard Management
- name: search
  description: Search Engine

  
paths:
  /search:
    get:
      tags:
      - search
      summary: Search API
      operationId: search

      parameters:
      - name: key
        in: query
        description: The search key
        required: true
        schema:
          type: string
      - name: order
        in: query
        description: The ordering required for search results
        required: false
        schema:
          type: string
          items:
            type: string
            default: relevance
            enum:
            - date
            - distance
            - relevance

      responses:
        200:
          description: Search Successful
          content: {}
        400:
          description: The server could not interpret the search description provided.
          content: {}
        405:
          description: Validation exception on the search parameters provided
          content: {}

  /location:
    put:
      tags:
      - location
      summary: Update an existing location
      operationId: updateLocation
      requestBody:
        description: Location Object in JSON format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        200:
          description: Location successfully updated
          content: {}
        400:
          description: The server could not interpret the location description provided.
          content: {}
        404:
          description: The server could not find the location provided
          content: {}
        405:
          description: Validation exception on the location provided
          content: {}
      security:
      - pa_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
    post:
      tags:
      - location
      summary: Add a new location
      operationId: addLocation
      requestBody:
        description: Location object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        200:
          description: Location successfully created
          content: {}
        405:
          description: Validation exception on the location provided
          content: {}
        400:
          description: The server could not interpret the data provided.
          content: {}
        404:
          description: The server could not find the data requested
      security:
      - pa_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
  /location/findByStatus:
    get:
      tags:
      - location
      summary: Finds Locations by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findLocationsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        400:
          description: Invalid status value
          content: {}
        404:
          description: The server could not find the data requested
          content: {}
        405:
          description: Validation exception on the data provided
          content: {}

      security:
      - pa_auth:
        - write:pets
        - read:pets
  /location/findByReaders:
    get:
      tags:
      - location
      summary: Finds Locations by tags
      description: Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findLocationsByReaders
      parameters:
      - name: tags
        in: query
        description: Readers to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        400:
          description: Invalid tag value
          content: {}
        404:
          description: The server could not find the data requested
          content: {}
        405:
          description: Validation exception on the data provided
          content: {}
      deprecated: true
      security:
      - pa_auth:
        - write:pets
        - read:pets
  /location/{id}:
    get:
      tags:
      - location
      summary: Find location by ID
      description: Returns a single location
      operationId: getLocationById
      parameters:
      - name: id
        in: path
        description: ID of the location
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Location not found
          content: {}
        405:
          description: Validation exception on the data provided
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - location
      summary: Updates a location in the store with form data
      operationId: updateLocationWithForm
      parameters:
      - name: id
        in: path
        description: ID of location that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the location
                status:
                  type: string
                  description: Updated status of the location
      responses:
        200:
          description: Location successfully created
          content: {}
        405:
          description: Invalid input
          content: {}
        400:
          description: The server could not interpret the data provided.
          content: {}
        404:
          description: The server could not find the data requested
          content: {}
      security:
      - pa_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - location
      summary: Delete a Location
      operationId: deleteLocation
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: id
        in: path
        description: Location id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Location not found
          content: {}
      security:
      - pa_auth:
        - write:pets
        - read:pets
  /location/{locationId}/uploadImage:
    post:
      tags:
      - location
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: locationId
        in: path
        description: ID of location to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - pa_auth:
        - write:pets
        - read:pets
  /event/inventory:
    get:
      tags:
      - event
      summary: Returns location inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /event:
    post:
      tags:
      - event
      summary: Place an order for a location
      operationId: placeEvent
      requestBody:
        description: order placed for purchasing the location
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid Event
          content: {}
      x-codegen-request-body-name: body
  /event/{id}:
    get:
      tags:
      - event
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getEventById
      parameters:
      - name: id
        in: path
        description: ID of location that needs to be fetched
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Event not found
          content: {}
    delete:
      tags:
      - event
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteEvent
      parameters:
      - name: id
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Event not found
          content: {}
  /reader:
    post:
      tags:
        - reader
      summary: Create reader user. We don't have too many details about such a user
      description: We create a reader user with a UUID and always identify him with that
      requestBody:
        description: Reader Object
        content:
          'application/json':
            schema: 
              $ref: '#/components/schemas/Reader'
        required: true
      responses:
        200:
          description: Location successfully created
          content: {}
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Location successfully created
          content: {}
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string

        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Location successfully deleted
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Event:
      type: object
      properties:
        userid:
          type: string
          format: string
        brief:
          type: string
          format: string
        latitude:
          type: number
          format: number
        longitude:
          type: number
          format: number
        expiry:
          type: integer
          format: int32
          description: expiry time in number of days
        timestamp:
          type: string
          format: date-time
        channel:
          type: string
          format: string
        priority:
          type: string
          format: string
        message:
          type: string
          format: string
        status:
          type: string
          description: Event Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
    Channel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        latitude:
          type: number
          format: number
        longitude:
          type: number
          format: number
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: number
        longitude:
          type: number
          format: number
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    Reader:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Location:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: string
          example: pune
        shortname:
          type: string
          format: string
          example: pune
        fullname:
          type: string
          format: string
          example: in.pune
        polygon:
          type: array
          items:
            type: string
        parent:
          type: string
          format: string
          example: in
    
    WebEntry:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Channel'
        name:
          type: string
          example: enthusiasts
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Reader'
        status:
          type: string
          description: location status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: WebEntry    
        
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        eventid:
          type: string
        message:
          type: string
        error:
          type: string
        redirect:
          type: string

    SearchObject:
      type: object
      properties:
        key:
          type: string
          format: string

  securitySchemes:
    pa_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://localhost:9090.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your locations
    api_key:
      type: apiKey
      name: api_key
      in: header
